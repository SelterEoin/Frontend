import React from 'react';
var ReactDOM = require('react-dom');
import {Editor, EditorState,RichUtils, convertToRaw,getDefaultKeyBinding, KeyBindingUtil} from 'draft-js';
const {hasCommandModifier} = KeyBindingUtil;

import { createStore } from 'redux';

var axios = require('axios');
var qs = require('qs');


export default class App extends React.Component {


  constructor(props) {
    super(props);
    this.state = {editorState: EditorState.createEmpty()};
    this.focus = () => this.refs.editor.focus();
    this.onChange = (editorState) => this.setState({editorState})
    this.onClick = this.handleClick.bind(this);



  }




  /*------------------------------------------------------------------------------------------*/
  handleClick = (event) => {
    const {editorState} = this.state;
    var selectionState = editorState.getSelection();
    var id_kursora = selectionState.focusOffset
    var anchorKey = selectionState.getAnchorKey();
    var currentContent = editorState.getCurrentContent();
    var currentContentBlock = currentContent.getBlockForKey(anchorKey);
    var text = currentContentBlock.getText();
    console.log(id_kursora+text)

    axios.get('/click_event=', {
    params: {
      ID: id_kursora,
      content: text
    }
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });





  }

  /*------------------------------------------------------------------------------------------*/

  keyBindingFn = (event) => {
    if (KeyBindingUtil.hasCommandModifier(event) && event.keyCode === 83) { return 'send_to_server'; }
    return getDefaultKeyBinding(event);
  }
	handleKeyCommand = (command) => {
    if (command === 'send_to_server') {
	  const {editorState} = this.state;
    var req = JSON.stringify(convertToRaw(editorState.getCurrentContent()))
	  axios.get('/send_editor_state?editor_state='+req)
	  .then(function (response) {
		console.log(response);
    console.log(response.data);
    var word_countARRAY = response.data.word_count;
    var word_countLIST = word_countARRAY.map(function(person)
    {return <li><a href = '#'>{person}</a></li>;});
    ReactDOM.render(<ul>{word_countLIST}</ul>,document.getElementById('word_countUI'))
    var speech_partsARRAY = response.data.speech_parts;
    var speech_partsLIST = speech_partsARRAY.map(function(person)
    {return <li><a href = '#'>{person}</a></li>;});
    ReactDOM.render(<ul>{speech_partsLIST}</ul>,document.getElementById('speech_partsUI'))

})
	.catch(function (error) {
    console.log(error);
  });


	 return 'handled';
    }
    return 'not-handled';
  }


  /*------------------------------------------------------------------------------------------*/
  /*------------------------------------------------------------------------------------------*/

  _onBoldClick() {
      this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));
    }
    _onItalicClick() {
      this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'ITALIC'));
    }
    _onUnderlineClick() {
      this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'UNDERLINE'));
    }

  _wordClick(props){

	 const {editorState} = this.state;
	 const contentState = convertToRaw( editorState.getCurrentContent());
	 const x = editorState.getCurrentContent();
      var synrequest = JSON.stringify(convertToRaw(editorState.getCurrentContent()))

	/*to odpowiada za pobieranie zaznaczenia*/
      var selectionState = editorState.getSelection();
      var anchorKey = selectionState.getAnchorKey();
      var currentContent = editorState.getCurrentContent();
      var currentContentBlock = currentContent.getBlockForKey(anchorKey);
      var start = selectionState.getStartOffset();
      var end = selectionState.getEndOffset();
      var selectedText = currentContentBlock.getText().slice(start, end);





	 axios.get('/background_process?proglang='+selectedText,{})
         .then(function(response){

		  console.log(response.data);
	/*console log odpowiada za wyswietlanie co jest pbierane z serwera(na stronie sie nie wyswietla)*/
    console.log(response.status);
    console.log(response.statusText);
    console.log(response.headers);
    console.log(response.config);

		/*response.data.result to pobrana lista synonimow*/
	var synonyms = response.data.result


	var synolist = synonyms.map(function(person){

	return <li><a href = '#'>{person}</a></li>;
});
ReactDOM.render(<ul>{synolist}</ul>,document.getElementById('synonim_menu'))



    }).catch(function(error){
		/*!!!!!!!!! tu macie robienie listy synonimow bez serwera(gdy jest błąd 404 bo nie ma serwera)*/
      console.log(error);

	var tymczasowa_lista = ['dog' , 'cat', 'costam', 'xd', 'xd']
	/*map robi liste slow */
	var synolist = tymczasowa_lista.map(function(person){
	return <li><a href = '#'>{person}</a></li>;
	 });
	  ReactDOM.render(<ul>{synolist}</ul>,document.getElementById('synonim_menu'))
    });

  }
  /*------------------------------------------------------------------------------------------*/
  /*------------------------------------------------------------------------------------------*/
  _send(props)
  {

	axios.get('/background_process?proglang=')
	  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });


  }


  /*-------------------------------------------------------------------------------------------*/
  /*-------------------------------------------------------------------------------------------*/

  render() {
      const {editorState} = this.state;
      const contentState = convertToRaw( editorState.getCurrentContent());
      const contentState2 =  editorState.getCurrentContent();

      var synrequest =  JSON.stringify(convertToRaw(editorState.getCurrentContent()))
	  const x = editorState.getSelection();

      var usersWithName = synrequest
	  /*y odpowiada za pobieranie samego tekstu z edytora*/
      const y = editorState.getCurrentContent().getPlainText()

	/*to odpowiada za pobieranie zaznaczenia*/
      var selectionState = editorState.getSelection();
      var anchorKey = selectionState.getAnchorKey();
      var currentContent = editorState.getCurrentContent();
      var currentContentBlock = currentContent.getBlockForKey(anchorKey);
      var start = selectionState.getStartOffset();
      var end = selectionState.getEndOffset();
      var selectedText = currentContentBlock.getText().slice(start, end);

      var end2 = selectionState.focusOffset
      var end3 = selectionState.startOffset

      var text = currentContentBlock.getText();
      var textsplit = text.split(" ");
      var ttt = textsplit[0]

      const startKey = editorState.getSelection().getStartKey();
      const startOffset = editorState.getSelection().getStartOffset();
      var blockWithLinkAtBeginning = contentState2.getBlockForKey(startKey);
      const linkKey = blockWithLinkAtBeginning.getEntityAt(startOffset);






    return (

    <div id='content'>
		<div id  = 'menu'>
    <div id='odstep' />
      <button onClick={this._wordClick.bind(this)}>Synonims</button>
      <div id='odstep' />
      <button onClick={this._onBoldClick.bind(this)}>B</button>
      <div id='odstep' />
      <button onClick={this._onItalicClick.bind(this)}>I</button>
      <div id='odstep' />
      <button onClick={this._onUnderlineClick.bind(this)}>U</button>
		</div>
        <div className='editor' onClick={this.onClick}>

          <Editor
      editorState={this.state.editorState}
			handleKeyCommand={this.handleKeyCommand}
      onChange={this.onChange}
			handleKeyCommand={this.handleKeyCommand}
			keyBindingFn={this.keyBindingFn}
        />
        </div>
		<div id  = 'wynik'>
		<div id  = 'synonim_menu'>synonyms</div>
		<div id = 'speech_partsUI'>speech_partsUI</div>
    <div id = 'word_countUI'>word_countUI</div>
		<div id = 'definicja'>definicja</div>
		<div id = 'ontologie'>ontologie

    </div>


    <div id = 'prz2'>{ttt}</div>
      <div id = 'prz3'>{end2}</div>




		</div>
      </div>
    );
  }
}
